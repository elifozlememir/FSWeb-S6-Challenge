{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.interceptFetch = void 0;\nvar headers_polyfill_1 = require(\"headers-polyfill\");\nvar toIsoResponse_1 = require(\"../../utils/toIsoResponse\");\nvar uuid_1 = require(\"../../utils/uuid\");\nvar debug = require('debug')('fetch');\nvar interceptFetch = function (observer, resolver) {\n  var pureFetch = window.fetch;\n  debug('replacing \"window.fetch\"...');\n  window.fetch = function (input, init) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var request, url, method, isoRequest, response, isomorphicResponse;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            request = new Request(input, init);\n            url = typeof input === 'string' ? input : input.url;\n            method = request.method;\n            debug('[%s] %s', method, url);\n            _a = {\n              id: uuid_1.uuidv4(),\n              url: new URL(url, location.origin),\n              method: method,\n              headers: new headers_polyfill_1.Headers(request.headers),\n              credentials: request.credentials\n            };\n            return [4 /*yield*/, request.clone().text()];\n          case 1:\n            isoRequest = (_a.body = _b.sent(), _a);\n            debug('isomorphic request', isoRequest);\n            observer.emit('request', isoRequest);\n            debug('awaiting for the mocked response...');\n            return [4 /*yield*/, resolver(isoRequest, request)];\n          case 2:\n            response = _b.sent();\n            debug('mocked response', response);\n            if (response) {\n              isomorphicResponse = toIsoResponse_1.toIsoResponse(response);\n              debug('derived isomorphic response', isomorphicResponse);\n              observer.emit('response', isoRequest, isomorphicResponse);\n              return [2 /*return*/, new Response(response.body, __assign(__assign({}, isomorphicResponse), {\n                // `Response.headers` cannot be instantiated with the `Headers` polyfill.\n                // Apparently, it halts if the `Headers` class contains unknown properties\n                // (i.e. the internal `Headers.map`).\n                headers: headers_polyfill_1.flattenHeadersObject(response.headers || {})\n              }))];\n            }\n            debug('no mocked response found, bypassing...');\n            return [2 /*return*/, pureFetch(request).then(function (response) {\n              return __awaiter(void 0, void 0, void 0, function () {\n                var cloneResponse, _a, _b, _c;\n                return __generator(this, function (_d) {\n                  switch (_d.label) {\n                    case 0:\n                      cloneResponse = response.clone();\n                      debug('original fetch performed', cloneResponse);\n                      _b = (_a = observer).emit;\n                      _c = ['response', isoRequest];\n                      return [4 /*yield*/, normalizeFetchResponse(cloneResponse)];\n                    case 1:\n                      _b.apply(_a, _c.concat([_d.sent()]));\n                      return [2 /*return*/, response];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  return function () {\n    debug('restoring modules...');\n    window.fetch = pureFetch;\n  };\n};\nexports.interceptFetch = interceptFetch;\nfunction normalizeFetchResponse(response) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _a;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          _a = {\n            status: response.status,\n            statusText: response.statusText,\n            headers: headers_polyfill_1.objectToHeaders(headers_polyfill_1.headersToObject(response.headers))\n          };\n          return [4 /*yield*/, response.text()];\n        case 1:\n          return [2 /*return*/, (_a.body = _b.sent(), _a)];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["debug","require","interceptFetch","observer","resolver","pureFetch","window","fetch","input","init","request","Request","url","method","id","uuid_1","URL","location","origin","headers","headers_polyfill_1","credentials","clone","text","isoRequest","_a","_b","emit","response","isomorphicResponse","toIsoResponse_1","Response","body","then","cloneResponse","normalizeFetchResponse","_d","exports","status","statusText"],"sources":["C:\\Users\\elif\\Documents\\React\\FSWeb-S6-Challenge\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\fetch\\index.ts"],"sourcesContent":["import {\n  Headers,\n  headersToObject,\n  objectToHeaders,\n  flattenHeadersObject,\n} from 'headers-polyfill'\nimport {\n  Interceptor,\n  IsomorphicRequest,\n  IsomorphicResponse,\n} from '../../createInterceptor'\nimport { toIsoResponse } from '../../utils/toIsoResponse'\nimport { uuidv4 } from '../../utils/uuid'\n\nconst debug = require('debug')('fetch')\n\nexport const interceptFetch: Interceptor = (observer, resolver) => {\n  const pureFetch = window.fetch\n\n  debug('replacing \"window.fetch\"...')\n\n  window.fetch = async (input, init) => {\n    const request = new Request(input, init)\n    const url = typeof input === 'string' ? input : input.url\n    const method = request.method\n\n    debug('[%s] %s', method, url)\n\n    const isoRequest: IsomorphicRequest = {\n      id: uuidv4(),\n      url: new URL(url, location.origin),\n      method: method,\n      headers: new Headers(request.headers),\n      credentials: request.credentials,\n      body: await request.clone().text(),\n    }\n    debug('isomorphic request', isoRequest)\n    observer.emit('request', isoRequest)\n\n    debug('awaiting for the mocked response...')\n    const response = await resolver(isoRequest, request)\n    debug('mocked response', response)\n\n    if (response) {\n      const isomorphicResponse = toIsoResponse(response)\n      debug('derived isomorphic response', isomorphicResponse)\n\n      observer.emit('response', isoRequest, isomorphicResponse)\n\n      return new Response(response.body, {\n        ...isomorphicResponse,\n        // `Response.headers` cannot be instantiated with the `Headers` polyfill.\n        // Apparently, it halts if the `Headers` class contains unknown properties\n        // (i.e. the internal `Headers.map`).\n        headers: flattenHeadersObject(response.headers || {}),\n      })\n    }\n\n    debug('no mocked response found, bypassing...')\n\n    return pureFetch(request).then(async (response) => {\n      const cloneResponse = response.clone()\n      debug('original fetch performed', cloneResponse)\n\n      observer.emit(\n        'response',\n        isoRequest,\n        await normalizeFetchResponse(cloneResponse)\n      )\n      return response\n    })\n  }\n\n  return () => {\n    debug('restoring modules...')\n    window.fetch = pureFetch\n  }\n}\n\nasync function normalizeFetchResponse(\n  response: Response\n): Promise<IsomorphicResponse> {\n  return {\n    status: response.status,\n    statusText: response.statusText,\n    headers: objectToHeaders(headersToObject(response.headers)),\n    body: await response.text(),\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}