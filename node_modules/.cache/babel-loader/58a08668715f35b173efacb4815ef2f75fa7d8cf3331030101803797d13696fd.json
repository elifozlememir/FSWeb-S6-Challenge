{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elif\\\\Documents\\\\React\\\\FSWeb-S6-Challenge\\\\src\\\\components\\\\Karakterler.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Karakterler = props => {\n  _s();\n  const {\n    veri\n  } = props;\n  console.log({\n    veri\n  });\n  const [open, setOpen] = useState('0');\n  const toggle = id => {\n    if (open === id) {\n      setOpen();\n    } else {\n      setOpen(id);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: veri.map(item => {\n      return /*#__PURE__*/_jsxDEV(Accordion, {\n        open: open,\n        toggle: toggle,\n        children: /*#__PURE__*/_jsxDEV(AccordionItem, {\n          children: [/*#__PURE__*/_jsxDEV(AccordionHeader, {\n            targetId: \"1\",\n            children: \"Accordion Item 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(AccordionBody, {\n            accordionId: \"1\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the first item's accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 13\n            }, this), \"You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \".accordion-body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 27\n            }, this), \", though the transition does limit overflow.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(Karakterler, \"yx3v0klkHN7WBOM7QLMNqY5xYlc=\");\n_c = Karakterler;\nexport default Karakterler;\nvar _c;\n$RefreshReg$(_c, \"Karakterler\");","map":{"version":3,"names":["React","useState","Accordion","AccordionBody","AccordionHeader","AccordionItem","jsxDEV","_jsxDEV","Karakterler","props","_s","veri","console","log","open","setOpen","toggle","id","children","map","item","targetId","fileName","_jsxFileName","lineNumber","columnNumber","accordionId","_c","$RefreshReg$"],"sources":["C:/Users/elif/Documents/React/FSWeb-S6-Challenge/src/components/Karakterler.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Accordion,\r\n  AccordionBody,\r\n  AccordionHeader,\r\n  AccordionItem,\r\n} from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst Karakterler=(props)=>{\r\n\r\nconst {veri}=props;\r\nconsole.log({veri})\r\n\r\n    const [open, setOpen] = useState('0');\r\n    const toggle = (id) => {\r\n      if (open === id) {\r\n        setOpen();\r\n      } else {\r\n        setOpen(id);\r\n      }\r\n    };\r\n\r\n\r\n\r\nreturn(\r\n    <div>\r\n\r\n{veri.map((item)=>{\r\n\r\n    return(\r\n    <Accordion open={open} toggle={toggle}>\r\n                 <AccordionItem>\r\n          <AccordionHeader targetId=\"1\">Accordion Item 1</AccordionHeader>\r\n          <AccordionBody accordionId=\"1\">\r\n            <strong>This is the first item&#39;s accordion body.</strong>\r\n            You can modify any of this with custom CSS or overriding our default\r\n            variables. It&#39;s also worth noting that just about any HTML can\r\n            go within the <code>.accordion-body</code>, though the transition\r\n            does limit overflow.\r\n          </AccordionBody>\r\n        </AccordionItem> \r\n\r\n    </Accordion>\r\n        \r\n    )\r\n})}\r\n\r\n\r\n\r\n\r\n\r\n      \r\n\r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default Karakterler;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,aAAa,QACR,YAAY;AACnB,OAAO,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG9C,MAAMC,WAAW,GAAEC,KAAK,IAAG;EAAAC,EAAA;EAE3B,MAAM;IAACC;EAAI,CAAC,GAACF,KAAK;EAClBG,OAAO,CAACC,GAAG,CAAC;IAACF;EAAI,CAAC,CAAC;EAEf,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,GAAG,CAAC;EACrC,MAAMe,MAAM,GAAIC,EAAE,IAAK;IACrB,IAAIH,IAAI,KAAKG,EAAE,EAAE;MACfF,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACLA,OAAO,CAACE,EAAE,CAAC;IACb;EACF,CAAC;EAIL,oBACIV,OAAA;IAAAW,QAAA,EAEHP,IAAI,CAACQ,GAAG,CAAEC,IAAI,IAAG;MAEd,oBACAb,OAAA,CAACL,SAAS;QAACY,IAAI,EAAEA,IAAK;QAACE,MAAM,EAAEA,MAAO;QAAAE,QAAA,eACzBX,OAAA,CAACF,aAAa;UAAAa,QAAA,gBACrBX,OAAA,CAACH,eAAe;YAACiB,QAAQ,EAAC,GAAG;YAAAH,QAAA,EAAC;UAAgB;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAiB,CAAC,eAChElB,OAAA,CAACJ,aAAa;YAACuB,WAAW,EAAC,GAAG;YAAAR,QAAA,gBAC5BX,OAAA;cAAAW,QAAA,EAAQ;YAA4C;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,sJAG/C,eAAAlB,OAAA;cAAAW,QAAA,EAAM;YAAe;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,gDAE5C;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAe,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAET,CAAC;IAGhB,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAQO,CAAC;AAGV,CAAC;AAAAf,EAAA,CAhDKF,WAAW;AAAAmB,EAAA,GAAXnB,WAAW;AAkDjB,eAAeA,WAAW;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}