{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elif\\\\Documents\\\\React\\\\FSWeb-S6-Challenge\\\\src\\\\components\\\\Karakterler.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Karakterler = () => {\n  _s();\n  const [open, setOpen] = useState('1');\n  const toggle = id => {\n    if (open === id) {\n      setOpen();\n    } else {\n      setOpen(id);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Accordion, {\n      open: open,\n      toggle: toggle,\n      children: /*#__PURE__*/_jsxDEV(AccordionItem, {\n        children: [/*#__PURE__*/_jsxDEV(AccordionHeader, {\n          targetId: \"1\",\n          children: \"Accordion Item 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AccordionBody, {\n          accordionId: \"1\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"This is the first item's accordion body.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this), \"You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \".accordion-body\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 27\n          }, this), \", though the transition does limit overflow.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(Karakterler, \"xAIfVgvFJ6GAJ9vUUusRBV+vZ1E=\");\n_c = Karakterler;\nexport default Karakterler;\nvar _c;\n$RefreshReg$(_c, \"Karakterler\");","map":{"version":3,"names":["React","useState","Accordion","AccordionBody","AccordionHeader","AccordionItem","jsxDEV","_jsxDEV","Karakterler","_s","open","setOpen","toggle","id","children","targetId","fileName","_jsxFileName","lineNumber","columnNumber","accordionId","_c","$RefreshReg$"],"sources":["C:/Users/elif/Documents/React/FSWeb-S6-Challenge/src/components/Karakterler.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Accordion,\r\n  AccordionBody,\r\n  AccordionHeader,\r\n  AccordionItem,\r\n} from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst Karakterler=()=>{\r\n\r\n\r\n    const [open, setOpen] = useState('1');\r\n    const toggle = (id) => {\r\n      if (open === id) {\r\n        setOpen();\r\n      } else {\r\n        setOpen(id);\r\n      }\r\n    };\r\n\r\n\r\n\r\nreturn(\r\n    <div>\r\n\r\n<Accordion open={open} toggle={toggle}>\r\n        <AccordionItem>\r\n          <AccordionHeader targetId=\"1\">Accordion Item 1</AccordionHeader>\r\n          <AccordionBody accordionId=\"1\">\r\n            <strong>This is the first item&#39;s accordion body.</strong>\r\n            You can modify any of this with custom CSS or overriding our default\r\n            variables. It&#39;s also worth noting that just about any HTML can\r\n            go within the <code>.accordion-body</code>, though the transition\r\n            does limit overflow.\r\n          </AccordionBody>\r\n        </AccordionItem>\r\n\r\n\r\n      </Accordion>\r\n\r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default Karakterler;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,aAAa,QACR,YAAY;AACnB,OAAO,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG9C,MAAMC,WAAW,GAACA,CAAA,KAAI;EAAAC,EAAA;EAGlB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,GAAG,CAAC;EACrC,MAAMW,MAAM,GAAIC,EAAE,IAAK;IACrB,IAAIH,IAAI,KAAKG,EAAE,EAAE;MACfF,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACLA,OAAO,CAACE,EAAE,CAAC;IACb;EACF,CAAC;EAIL,oBACIN,OAAA;IAAAO,QAAA,eAEJP,OAAA,CAACL,SAAS;MAACQ,IAAI,EAAEA,IAAK;MAACE,MAAM,EAAEA,MAAO;MAAAE,QAAA,eAC9BP,OAAA,CAACF,aAAa;QAAAS,QAAA,gBACZP,OAAA,CAACH,eAAe;UAACW,QAAQ,EAAC,GAAG;UAAAD,QAAA,EAAC;QAAgB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAiB,CAAC,eAChEZ,OAAA,CAACJ,aAAa;UAACiB,WAAW,EAAC,GAAG;UAAAN,QAAA,gBAC5BP,OAAA;YAAAO,QAAA,EAAQ;UAA4C;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,sJAG/C,eAAAZ,OAAA;YAAAO,QAAA,EAAM;UAAe;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,gDAE5C;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAET,CAAC;AAGV,CAAC;AAAAV,EAAA,CAnCKD,WAAW;AAAAa,EAAA,GAAXb,WAAW;AAqCjB,eAAeA,WAAW;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}