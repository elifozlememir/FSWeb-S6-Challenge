{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRemoteResolver = exports.createRemoteInterceptor = void 0;\nvar headers_polyfill_1 = require(\"headers-polyfill\");\nvar outvariant_1 = require(\"outvariant\");\nvar strict_event_emitter_1 = require(\"strict-event-emitter\");\nvar createInterceptor_1 = require(\"./createInterceptor\");\nvar toIsoResponse_1 = require(\"./utils/toIsoResponse\");\nfunction requestReviver(key, value) {\n  switch (key) {\n    case 'url':\n      return new URL(value);\n    case 'headers':\n      return new headers_polyfill_1.Headers(value);\n    default:\n      return value;\n  }\n}\n/**\n * Creates a remote request interceptor that delegates\n * the mocked response resolution to the parent process.\n * The parent process must establish a remote resolver\n * by calling `createRemoteResolver` function.\n */\nfunction createRemoteInterceptor(options) {\n  outvariant_1.invariant(process.connected, \"Failed to create a remote interceptor: the current process (%s) does not have a parent. Please make sure you're spawning this process as a child process in order to use remote request interception.\", process.pid);\n  if (typeof process.send === 'undefined') {\n    throw new Error(\"Failed to create a remote interceptor: the current process (\" + process.pid + \") does not have the IPC enabled. Please make sure you're spawning this process with the \\\"ipc\\\" stdio value set:\\n\\nspawn('node', ['module.js'], { stdio: ['ipc'] })\");\n  }\n  var handleParentMessage;\n  var interceptor = createInterceptor_1.createInterceptor(__assign(__assign({}, options), {\n    resolver: function (request) {\n      var _a;\n      var serializedRequest = JSON.stringify(request);\n      (_a = process.send) === null || _a === void 0 ? void 0 : _a.call(process, \"request:\" + serializedRequest);\n      return new Promise(function (resolve) {\n        handleParentMessage = function (message) {\n          if (typeof message !== 'string') {\n            return;\n          }\n          if (message.startsWith(\"response:\" + request.id)) {\n            var _a = __read(message.match(/^response:.+?:(.+)$/) || [], 2),\n              responseString = _a[1];\n            if (!responseString) {\n              return resolve();\n            }\n            var mockedResponse = JSON.parse(responseString);\n            return resolve(mockedResponse);\n          }\n        };\n        process.addListener('message', handleParentMessage);\n      });\n    }\n  }));\n  return __assign(__assign({}, interceptor), {\n    restore: function () {\n      interceptor.restore();\n      process.removeListener('message', handleParentMessage);\n    }\n  });\n}\nexports.createRemoteInterceptor = createRemoteInterceptor;\n/**\n * Creates a response resolver function attached to the given `ChildProcess`.\n * The child process must establish a remote interceptor by calling `createRemoteInterceptor` function.\n */\nfunction createRemoteResolver(options) {\n  var _this = this;\n  var observer = new strict_event_emitter_1.StrictEventEmitter();\n  var handleChildMessage = function (message) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var _a, requestString, isoRequest_1, mockedResponse_1, serializedResponse;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (typeof message !== 'string') {\n              return [2 /*return*/];\n            }\n\n            if (!message.startsWith('request:')) return [3 /*break*/, 2];\n            _a = __read(message.match(/^request:(.+)$/) || [], 2), requestString = _a[1];\n            if (!requestString) {\n              return [2 /*return*/];\n            }\n\n            isoRequest_1 = JSON.parse(requestString, requestReviver);\n            observer.emit('request', isoRequest_1);\n            return [4 /*yield*/, options.resolver(isoRequest_1, undefined)\n            // Send the mocked response to the child process.\n            ];\n\n          case 1:\n            mockedResponse_1 = _b.sent();\n            serializedResponse = JSON.stringify(mockedResponse_1);\n            options.process.send(\"response:\" + isoRequest_1.id + \":\" + serializedResponse, function (error) {\n              if (error) {\n                return;\n              }\n              if (mockedResponse_1) {\n                // Emit an optimisting \"response\" event at this point,\n                // not to rely on the back-and-forth signaling for the sake of the event.\n                observer.emit('response', isoRequest_1, toIsoResponse_1.toIsoResponse(mockedResponse_1));\n              }\n            });\n            _b.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  var cleanup = function () {\n    options.process.removeListener('message', handleChildMessage);\n  };\n  options.process.addListener('message', handleChildMessage);\n  options.process.addListener('disconnect', cleanup);\n  options.process.addListener('error', cleanup);\n  options.process.addListener('exit', cleanup);\n  return {\n    on: function (event, listener) {\n      observer.addListener(event, listener);\n    }\n  };\n}\nexports.createRemoteResolver = createRemoteResolver;","map":{"version":3,"mappings":"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","names":["requestReviver","key","value","URL","headers_polyfill_1","createRemoteInterceptor","options","outvariant_1","process","connected","pid","send","Error","handleParentMessage","interceptor","createInterceptor_1","resolver","request","serializedRequest","JSON","stringify","Promise","resolve","message","startsWith","id","match","responseString","mockedResponse","parse","addListener","restore","removeListener","exports","createRemoteResolver","observer","strict_event_emitter_1","handleChildMessage","_a","requestString","isoRequest_1","emit","undefined","mockedResponse_1","_b","serializedResponse","error","toIsoResponse_1","cleanup","on","event","listener"],"sources":["C:\\Users\\elif\\Documents\\React\\FSWeb-S6-Challenge\\node_modules\\@mswjs\\interceptors\\src\\remote.ts"],"sourcesContent":["import { ChildProcess, Serializable } from 'child_process'\nimport { Headers } from 'headers-polyfill'\nimport { invariant } from 'outvariant'\nimport { StrictEventEmitter } from 'strict-event-emitter'\nimport {\n  createInterceptor,\n  InterceptorApi,\n  InterceptorEventsMap,\n  InterceptorOptions,\n  IsomorphicRequest,\n  Resolver,\n} from './createInterceptor'\nimport { toIsoResponse } from './utils/toIsoResponse'\n\ntype ProcessEventListener = (message: Serializable, ...args: any[]) => void\n\nexport type CreateRemoteInterceptorOptions = Omit<\n  InterceptorOptions,\n  'resolver'\n>\n\nexport type RemoteResolverApi = Pick<InterceptorApi, 'on'>\n\nexport interface CreateRemoteResolverOptions {\n  process: ChildProcess\n  resolver: Resolver\n}\n\nfunction requestReviver(key: string, value: any) {\n  switch (key) {\n    case 'url':\n      return new URL(value)\n\n    case 'headers':\n      return new Headers(value)\n\n    default:\n      return value\n  }\n}\n\n/**\n * Creates a remote request interceptor that delegates\n * the mocked response resolution to the parent process.\n * The parent process must establish a remote resolver\n * by calling `createRemoteResolver` function.\n */\nexport function createRemoteInterceptor(\n  options: CreateRemoteInterceptorOptions\n): InterceptorApi {\n  invariant(\n    process.connected,\n    `Failed to create a remote interceptor: the current process (%s) does not have a parent. Please make sure you're spawning this process as a child process in order to use remote request interception.`,\n    process.pid\n  )\n\n  if (typeof process.send === 'undefined') {\n    throw new Error(\n      `\\\nFailed to create a remote interceptor: the current process (${process.pid}) does not have the IPC enabled. Please make sure you're spawning this process with the \"ipc\" stdio value set:\n\nspawn('node', ['module.js'], { stdio: ['ipc'] })\\\n`\n    )\n  }\n\n  let handleParentMessage: ProcessEventListener\n\n  const interceptor = createInterceptor({\n    ...options,\n    resolver(request) {\n      const serializedRequest = JSON.stringify(request)\n      process.send?.(`request:${serializedRequest}`)\n\n      return new Promise((resolve) => {\n        handleParentMessage = (message: Serializable) => {\n          if (typeof message !== 'string') {\n            return\n          }\n\n          if (message.startsWith(`response:${request.id}`)) {\n            const [, responseString] =\n              message.match(/^response:.+?:(.+)$/) || []\n\n            if (!responseString) {\n              return resolve()\n            }\n\n            const mockedResponse = JSON.parse(responseString)\n\n            return resolve(mockedResponse)\n          }\n        }\n\n        process.addListener('message', handleParentMessage)\n      })\n    },\n  })\n\n  return {\n    ...interceptor,\n    restore() {\n      interceptor.restore()\n      process.removeListener('message', handleParentMessage)\n    },\n  }\n}\n\n/**\n * Creates a response resolver function attached to the given `ChildProcess`.\n * The child process must establish a remote interceptor by calling `createRemoteInterceptor` function.\n */\nexport function createRemoteResolver(\n  options: CreateRemoteResolverOptions\n): RemoteResolverApi {\n  const observer = new StrictEventEmitter<InterceptorEventsMap>()\n\n  const handleChildMessage: ProcessEventListener = async (message) => {\n    if (typeof message !== 'string') {\n      return\n    }\n\n    if (message.startsWith('request:')) {\n      const [, requestString] = message.match(/^request:(.+)$/) || []\n\n      if (!requestString) {\n        return\n      }\n\n      const isoRequest: IsomorphicRequest = JSON.parse(\n        requestString,\n        requestReviver\n      )\n\n      observer.emit('request', isoRequest)\n\n      // Retrieve the mocked response.\n      const mockedResponse = await options.resolver(\n        isoRequest,\n        undefined as any\n      )\n\n      // Send the mocked response to the child process.\n      const serializedResponse = JSON.stringify(mockedResponse)\n      options.process.send(\n        `response:${isoRequest.id}:${serializedResponse}`,\n        (error) => {\n          if (error) {\n            return\n          }\n\n          if (mockedResponse) {\n            // Emit an optimisting \"response\" event at this point,\n            // not to rely on the back-and-forth signaling for the sake of the event.\n            observer.emit('response', isoRequest, toIsoResponse(mockedResponse))\n          }\n        }\n      )\n    }\n  }\n\n  const cleanup = () => {\n    options.process.removeListener('message', handleChildMessage)\n  }\n\n  options.process.addListener('message', handleChildMessage)\n  options.process.addListener('disconnect', cleanup)\n  options.process.addListener('error', cleanup)\n  options.process.addListener('exit', cleanup)\n\n  return {\n    on(event, listener) {\n      observer.addListener(event, listener)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}