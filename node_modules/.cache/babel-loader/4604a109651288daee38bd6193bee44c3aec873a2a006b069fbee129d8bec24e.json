{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elif\\\\Documents\\\\React\\\\FSWeb-S6-Challenge\\\\src\\\\components\\\\Karakterler.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Karakterler = props => {\n  _s();\n  const {\n    veri\n  } = props;\n  console.log({\n    veri\n  });\n  const [open, setOpen] = useState('1');\n  const toggle = id => {\n    if (open === id) {\n      setOpen();\n    } else {\n      setOpen(id);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(Karakterler, \"xAIfVgvFJ6GAJ9vUUusRBV+vZ1E=\");\n_c = Karakterler;\nexport default Karakterler;\nvar _c;\n$RefreshReg$(_c, \"Karakterler\");","map":{"version":3,"names":["React","useState","Accordion","AccordionBody","AccordionHeader","AccordionItem","jsxDEV","_jsxDEV","Karakterler","props","_s","veri","console","log","open","setOpen","toggle","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/elif/Documents/React/FSWeb-S6-Challenge/src/components/Karakterler.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Accordion,\r\n  AccordionBody,\r\n  AccordionHeader,\r\n  AccordionItem,\r\n} from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst Karakterler=(props)=>{\r\n\r\nconst {veri}=props;\r\nconsole.log({veri})\r\n\r\n    const [open, setOpen] = useState('1');\r\n    const toggle = (id) => {\r\n      if (open === id) {\r\n        setOpen();\r\n      } else {\r\n        setOpen(id);\r\n      }\r\n    };\r\n\r\n\r\n\r\nreturn(\r\n    <div>\r\n\r\n{/* {veri.map((item)=>{\r\n\r\n    return(\r\n    <Accordion open={open} toggle={toggle}>\r\n        {item.name}\r\n\r\n    </Accordion>\r\n        \r\n    )\r\n})} */}\r\n\r\n\r\n {/*        <AccordionItem>\r\n          <AccordionHeader targetId=\"1\">Accordion Item 1</AccordionHeader>\r\n          <AccordionBody accordionId=\"1\">\r\n            <strong>This is the first item&#39;s accordion body.</strong>\r\n            You can modify any of this with custom CSS or overriding our default\r\n            variables. It&#39;s also worth noting that just about any HTML can\r\n            go within the <code>.accordion-body</code>, though the transition\r\n            does limit overflow.\r\n          </AccordionBody>\r\n        </AccordionItem> */}\r\n\r\n\r\n      \r\n\r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default Karakterler;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,aAAa,QACR,YAAY;AACnB,OAAO,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG9C,MAAMC,WAAW,GAAEC,KAAK,IAAG;EAAAC,EAAA;EAE3B,MAAM;IAACC;EAAI,CAAC,GAACF,KAAK;EAClBG,OAAO,CAACC,GAAG,CAAC;IAACF;EAAI,CAAC,CAAC;EAEf,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,GAAG,CAAC;EACrC,MAAMe,MAAM,GAAIC,EAAE,IAAK;IACrB,IAAIH,IAAI,KAAKG,EAAE,EAAE;MACfF,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACLA,OAAO,CAACE,EAAE,CAAC;IACb;EACF,CAAC;EAIL,oBACIV,OAAA;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OA4BK,CAAC;AAGV,CAAC;AAAAX,EAAA,CAhDKF,WAAW;AAAAc,EAAA,GAAXd,WAAW;AAkDjB,eAAeA,WAAW;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}