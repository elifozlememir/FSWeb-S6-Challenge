{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createXMLHttpRequestOverride = void 0;\n/**\n * XMLHttpRequest override class.\n * Inspired by https://github.com/marvinhagemeister/xhr-mocklet.\n */\nvar until_1 = require(\"@open-draft/until\");\nvar headers_polyfill_1 = require(\"headers-polyfill\");\nvar xmldom_1 = require(\"@xmldom/xmldom\");\nvar parseJson_1 = require(\"../../utils/parseJson\");\nvar toIsoResponse_1 = require(\"../../utils/toIsoResponse\");\nvar uuid_1 = require(\"../../utils/uuid\");\nvar bufferFrom_1 = require(\"./utils/bufferFrom\");\nvar createEvent_1 = require(\"./utils/createEvent\");\nvar createDebug = require('debug');\nvar createXMLHttpRequestOverride = function (options) {\n  var _a;\n  var pureXMLHttpRequest = options.pureXMLHttpRequest,\n    observer = options.observer,\n    resolver = options.resolver;\n  var debug = createDebug('XHR');\n  return _a = /** @class */function () {\n    function XMLHttpRequestOverride() {\n      // Collection of events modified by `addEventListener`/`removeEventListener` calls.\n      this._events = [];\n      this.UNSENT = 0;\n      this.OPENED = 1;\n      this.HEADERS_RECEIVED = 2;\n      this.LOADING = 3;\n      this.DONE = 4;\n      this.onreadystatechange = null;\n      /* Events */\n      this.onabort = null;\n      this.onerror = null;\n      this.onload = null;\n      this.onloadend = null;\n      this.onloadstart = null;\n      this.onprogress = null;\n      this.ontimeout = null;\n      this.url = '';\n      this.method = 'GET';\n      this.readyState = this.UNSENT;\n      this.withCredentials = false;\n      this.status = 200;\n      this.statusText = 'OK';\n      this.data = '';\n      this.response = '';\n      this.responseType = 'text';\n      this.responseText = '';\n      this.responseXML = null;\n      this.responseURL = '';\n      this.upload = {};\n      this.timeout = 0;\n      this._requestHeaders = new headers_polyfill_1.Headers();\n      this._responseHeaders = new headers_polyfill_1.Headers();\n    }\n    XMLHttpRequestOverride.prototype.setReadyState = function (nextState) {\n      if (nextState === this.readyState) {\n        return;\n      }\n      debug('readyState change %d -> %d', this.readyState, nextState);\n      this.readyState = nextState;\n      if (nextState !== this.UNSENT) {\n        debug('triggerring readystate change...');\n        this.trigger('readystatechange');\n      }\n    };\n    /**\n     * Triggers both direct callback and attached event listeners\n     * for the given event.\n     */\n    XMLHttpRequestOverride.prototype.trigger = function (eventName, options) {\n      var e_1, _a;\n      debug('trigger \"%s\" (%d)', eventName, this.readyState);\n      debug('resolve listener for event \"%s\"', eventName);\n      // @ts-expect-error XMLHttpRequest class has no index signature.\n      var callback = this[\"on\" + eventName];\n      callback === null || callback === void 0 ? void 0 : callback.call(this, createEvent_1.createEvent(this, eventName, options));\n      try {\n        for (var _b = __values(this._events), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var event_1 = _c.value;\n          if (event_1.name === eventName) {\n            debug('calling mock event listener \"%s\" (%d)', eventName, this.readyState);\n            event_1.listener.call(this, createEvent_1.createEvent(this, eventName, options));\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return this;\n    };\n    XMLHttpRequestOverride.prototype.reset = function () {\n      debug('reset');\n      this.setReadyState(this.UNSENT);\n      this.status = 200;\n      this.statusText = 'OK';\n      this.data = '';\n      this.response = null;\n      this.responseText = null;\n      this.responseXML = null;\n      this._requestHeaders = new headers_polyfill_1.Headers();\n      this._responseHeaders = new headers_polyfill_1.Headers();\n    };\n    XMLHttpRequestOverride.prototype.open = function (method, url, async, user, password) {\n      if (async === void 0) {\n        async = true;\n      }\n      return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          debug = createDebug(\"XHR \" + method + \" \" + url);\n          debug('open', {\n            method: method,\n            url: url,\n            async: async,\n            user: user,\n            password: password\n          });\n          this.reset();\n          this.setReadyState(this.OPENED);\n          if (typeof url === 'undefined') {\n            this.url = method;\n            this.method = 'GET';\n          } else {\n            this.url = url;\n            this.method = method;\n            this.async = async;\n            this.user = user;\n            this.password = password;\n          }\n          return [2 /*return*/];\n        });\n      });\n    };\n\n    XMLHttpRequestOverride.prototype.send = function (data) {\n      var _this = this;\n      debug('send %s %s', this.method, this.url);\n      this.data = data || '';\n      var url;\n      try {\n        url = new URL(this.url);\n      } catch (error) {\n        // Assume a relative URL, if construction of a new `URL` instance fails.\n        // Since `XMLHttpRequest` always executed in a DOM-like environment,\n        // resolve the relative request URL against the current window location.\n        url = new URL(this.url, window.location.href);\n      }\n      debug('request headers', this._requestHeaders);\n      // Create an intercepted request instance exposed to the request intercepting middleware.\n      var isoRequest = {\n        id: uuid_1.uuidv4(),\n        url: url,\n        method: this.method,\n        headers: this._requestHeaders,\n        credentials: this.withCredentials ? 'include' : 'omit',\n        body: this.data\n      };\n      observer.emit('request', isoRequest);\n      debug('awaiting mocked response...');\n      Promise.resolve(until_1.until(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2 /*return*/, resolver(isoRequest, this)];\n          });\n        });\n      })).then(function (_a) {\n        var _b;\n        var _c = __read(_a, 2),\n          middlewareException = _c[0],\n          mockedResponse = _c[1];\n        // When the request middleware throws an exception, error the request.\n        // This cancels the request and is similar to a network error.\n        if (middlewareException) {\n          debug('middleware function threw an exception!', middlewareException);\n          // No way to propagate the actual error message.\n          _this.trigger('error');\n          _this.abort();\n          return;\n        }\n        // Return a mocked response, if provided in the middleware.\n        if (mockedResponse) {\n          debug('received mocked response', mockedResponse);\n          // Trigger a loadstart event to indicate the initialization of the fetch.\n          _this.trigger('loadstart');\n          _this.status = mockedResponse.status || 200;\n          _this.statusText = mockedResponse.statusText || 'OK';\n          _this._responseHeaders = mockedResponse.headers ? headers_polyfill_1.objectToHeaders(mockedResponse.headers) : new headers_polyfill_1.Headers();\n          debug('set response status', _this.status, _this.statusText);\n          debug('set response headers', _this._responseHeaders);\n          // Mark that response headers has been received\n          // and trigger a ready state event to reflect received headers\n          // in a custom `onreadystatechange` callback.\n          _this.setReadyState(_this.HEADERS_RECEIVED);\n          debug('response type', _this.responseType);\n          _this.response = _this.getResponseBody(mockedResponse.body);\n          _this.responseText = mockedResponse.body || '';\n          _this.responseXML = _this.getResponseXML();\n          debug('set response body', _this.response);\n          if (mockedResponse.body && _this.response) {\n            _this.setReadyState(_this.LOADING);\n            // Presense of the mocked response implies a response body (not null).\n            // Presense of the coerced `this.response` implies the mocked body is valid.\n            var bodyBuffer = bufferFrom_1.bufferFrom(mockedResponse.body);\n            // Trigger a progress event based on the mocked response body.\n            _this.trigger('progress', {\n              loaded: bodyBuffer.length,\n              total: bodyBuffer.length\n            });\n          }\n          /**\n           * Explicitly mark the request as done so its response never hangs.\n           * @see https://github.com/mswjs/interceptors/issues/13\n           */\n          _this.setReadyState(_this.DONE);\n          // Trigger a load event to indicate the fetch has succeeded.\n          _this.trigger('load');\n          // Trigger a loadend event to indicate the fetch has completed.\n          _this.trigger('loadend');\n          observer.emit('response', isoRequest, toIsoResponse_1.toIsoResponse(mockedResponse));\n        } else {\n          debug('no mocked response received!');\n          // Perform an original request, when the request middleware returned no mocked response.\n          var originalRequest_1 = new pureXMLHttpRequest();\n          debug('opening an original request %s %s', _this.method, _this.url);\n          originalRequest_1.open(_this.method, _this.url, (_b = _this.async) !== null && _b !== void 0 ? _b : true, _this.user, _this.password);\n          // Reflect a successful state of the original request\n          // on the patched instance.\n          originalRequest_1.addEventListener('load', function () {\n            debug('original \"onload\"');\n            _this.status = originalRequest_1.status;\n            _this.statusText = originalRequest_1.statusText;\n            _this.responseURL = originalRequest_1.responseURL;\n            _this.responseType = originalRequest_1.responseType;\n            _this.response = originalRequest_1.response;\n            _this.responseText = originalRequest_1.responseText;\n            _this.responseXML = originalRequest_1.responseXML;\n            debug('set mock request readyState to DONE');\n            // Explicitly mark the mocked request instance as done\n            // so the response never hangs.\n            /**\n             * @note `readystatechange` listener is called TWICE\n             * in the case of unhandled request.\n             */\n            _this.setReadyState(_this.DONE);\n            debug('received original response', _this.status, _this.statusText);\n            debug('original response body:', _this.response);\n            var responseHeaders = originalRequest_1.getAllResponseHeaders();\n            debug('original response headers:\\n', responseHeaders);\n            _this._responseHeaders = headers_polyfill_1.stringToHeaders(responseHeaders);\n            debug('original response headers (normalized)', _this._responseHeaders);\n            debug('original response finished');\n            observer.emit('response', isoRequest, {\n              status: originalRequest_1.status,\n              statusText: originalRequest_1.statusText,\n              headers: _this._responseHeaders,\n              body: originalRequest_1.response\n            });\n          });\n          // Assign callbacks and event listeners from the intercepted XHR instance\n          // to the original XHR instance.\n          _this.propagateCallbacks(originalRequest_1);\n          _this.propagateListeners(originalRequest_1);\n          _this.propagateHeaders(originalRequest_1, _this._requestHeaders);\n          if (_this.async) {\n            originalRequest_1.timeout = _this.timeout;\n          }\n          debug('send', _this.data);\n          originalRequest_1.send(_this.data);\n        }\n      });\n    };\n    XMLHttpRequestOverride.prototype.abort = function () {\n      debug('abort');\n      if (this.readyState > this.UNSENT && this.readyState < this.DONE) {\n        this.setReadyState(this.UNSENT);\n        this.trigger('abort');\n      }\n    };\n    XMLHttpRequestOverride.prototype.dispatchEvent = function () {\n      return false;\n    };\n    XMLHttpRequestOverride.prototype.setRequestHeader = function (name, value) {\n      debug('set request header \"%s\" to \"%s\"', name, value);\n      this._requestHeaders.append(name, value);\n    };\n    XMLHttpRequestOverride.prototype.getResponseHeader = function (name) {\n      debug('get response header \"%s\"', name);\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        debug('cannot return a header: headers not received (state: %s)', this.readyState);\n        return null;\n      }\n      var headerValue = this._responseHeaders.get(name);\n      debug('resolved response header \"%s\" to \"%s\"', name, headerValue, this._responseHeaders);\n      return headerValue;\n    };\n    XMLHttpRequestOverride.prototype.getAllResponseHeaders = function () {\n      debug('get all response headers');\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        debug('cannot return headers: headers not received (state: %s)', this.readyState);\n        return '';\n      }\n      return headers_polyfill_1.headersToString(this._responseHeaders);\n    };\n    XMLHttpRequestOverride.prototype.addEventListener = function (name, listener) {\n      debug('addEventListener', name, listener);\n      this._events.push({\n        name: name,\n        listener: listener\n      });\n    };\n    XMLHttpRequestOverride.prototype.removeEventListener = function (name, listener) {\n      debug('removeEventListener', name, listener);\n      this._events = this._events.filter(function (storedEvent) {\n        return storedEvent.name !== name && storedEvent.listener !== listener;\n      });\n    };\n    XMLHttpRequestOverride.prototype.overrideMimeType = function () {};\n    /**\n     * Resolves the response based on the `responseType` value.\n     */\n    XMLHttpRequestOverride.prototype.getResponseBody = function (body) {\n      // Handle an improperly set \"null\" value of the mocked response body.\n      var textBody = body !== null && body !== void 0 ? body : '';\n      debug('coerced response body to', textBody);\n      switch (this.responseType) {\n        case 'json':\n          {\n            debug('resolving response body as JSON');\n            return parseJson_1.parseJson(textBody);\n          }\n        case 'blob':\n          {\n            var blobType = this.getResponseHeader('content-type') || 'text/plain';\n            debug('resolving response body as Blob', {\n              type: blobType\n            });\n            return new Blob([textBody], {\n              type: blobType\n            });\n          }\n        case 'arraybuffer':\n          {\n            debug('resolving response body as ArrayBuffer');\n            var arrayBuffer = bufferFrom_1.bufferFrom(textBody);\n            return arrayBuffer;\n          }\n        default:\n          return textBody;\n      }\n    };\n    XMLHttpRequestOverride.prototype.getResponseXML = function () {\n      var contentType = this.getResponseHeader('Content-Type');\n      if (contentType === 'application/xml' || contentType === 'text/xml') {\n        return new xmldom_1.DOMParser().parseFromString(this.responseText, contentType);\n      }\n      return null;\n    };\n    /**\n     * Propagates mock XMLHttpRequest instance callbacks\n     * to the given XMLHttpRequest instance.\n     */\n    XMLHttpRequestOverride.prototype.propagateCallbacks = function (request) {\n      request.onabort = this.abort;\n      request.onerror = this.onerror;\n      request.ontimeout = this.ontimeout;\n      request.onload = this.onload;\n      request.onloadstart = this.onloadstart;\n      request.onloadend = this.onloadend;\n      request.onprogress = this.onprogress;\n      request.onreadystatechange = this.onreadystatechange;\n    };\n    /**\n     * Propagates the mock XMLHttpRequest instance listeners\n     * to the given XMLHttpRequest instance.\n     */\n    XMLHttpRequestOverride.prototype.propagateListeners = function (request) {\n      debug('propagating request listeners (%d) to the original request', this._events.length, this._events);\n      this._events.forEach(function (_a) {\n        var name = _a.name,\n          listener = _a.listener;\n        request.addEventListener(name, listener);\n      });\n    };\n    XMLHttpRequestOverride.prototype.propagateHeaders = function (request, headers) {\n      debug('propagating request headers to the original request', headers);\n      // Preserve the request headers casing.\n      Object.entries(headers.raw()).forEach(function (_a) {\n        var _b = __read(_a, 2),\n          name = _b[0],\n          value = _b[1];\n        debug('setting \"%s\" (%s) header on the original request', name, value);\n        request.setRequestHeader(name, value);\n      });\n    };\n    return XMLHttpRequestOverride;\n  }(), /* Request state */\n  _a.UNSENT = 0, _a.OPENED = 1, _a.HEADERS_RECEIVED = 2, _a.LOADING = 3, _a.DONE = 4, _a;\n};\nexports.createXMLHttpRequestOverride = createXMLHttpRequestOverride;","map":{"version":3,"mappings":"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","names":["createDebug","require","createXMLHttpRequestOverride","options","observer","resolver","debug","url","method","readyState","UNSENT","withCredentials","status","statusText","data","response","responseType","responseText","responseXML","responseURL","upload","timeout","_requestHeaders","headers_polyfill_1","_responseHeaders","XMLHttpRequestOverride","nextState","trigger","eventName","callback","call","createEvent_1","_events","event_1","name","listener","setReadyState","async","user","password","reset","OPENED","URL","error","window","location","href","isoRequest","id","uuid_1","headers","credentials","body","emit","Promise","resolve","until_1","then","_a","_c","middlewareException","mockedResponse","_this","abort","HEADERS_RECEIVED","getResponseBody","getResponseXML","LOADING","bodyBuffer","bufferFrom_1","loaded","length","total","DONE","toIsoResponse_1","originalRequest_1","pureXMLHttpRequest","open","addEventListener","responseHeaders","getAllResponseHeaders","propagateCallbacks","propagateListeners","propagateHeaders","send","value","append","headerValue","get","push","filter","storedEvent","textBody","parseJson_1","blobType","getResponseHeader","type","Blob","arrayBuffer","contentType","xmldom_1","parseFromString","request","onabort","onerror","ontimeout","onload","onloadstart","onloadend","onprogress","onreadystatechange","forEach","Object","entries","raw","_b","setRequestHeader","exports"],"sources":["C:\\Users\\elif\\Documents\\React\\FSWeb-S6-Challenge\\node_modules\\@mswjs\\interceptors\\src\\interceptors\\XMLHttpRequest\\XMLHttpRequestOverride.ts"],"sourcesContent":["/**\n * XMLHttpRequest override class.\n * Inspired by https://github.com/marvinhagemeister/xhr-mocklet.\n */\nimport { until } from '@open-draft/until'\nimport {\n  Headers,\n  stringToHeaders,\n  objectToHeaders,\n  headersToString,\n} from 'headers-polyfill'\nimport { DOMParser } from '@xmldom/xmldom'\nimport { IsomorphicRequest, Observer, Resolver } from '../../createInterceptor'\nimport { parseJson } from '../../utils/parseJson'\nimport { toIsoResponse } from '../../utils/toIsoResponse'\nimport { uuidv4 } from '../../utils/uuid'\nimport { bufferFrom } from './utils/bufferFrom'\nimport { createEvent } from './utils/createEvent'\n\nconst createDebug = require('debug')\n\ntype XMLHttpRequestEventHandler = (\n  this: XMLHttpRequest,\n  event: Event | ProgressEvent<any>\n) => void\n\ninterface XMLHttpRequestEvent<EventMap extends any> {\n  name: keyof EventMap\n  listener: XMLHttpRequestEventHandler\n}\n\ninterface CreateXMLHttpRequestOverrideOptions {\n  pureXMLHttpRequest: typeof window.XMLHttpRequest\n  observer: Observer\n  resolver: Resolver\n}\n\ninterface InternalXMLHttpRequestEventTargetEventMap\n  extends XMLHttpRequestEventTargetEventMap {\n  readystatechange: Event\n}\n\nexport const createXMLHttpRequestOverride = (\n  options: CreateXMLHttpRequestOverrideOptions\n) => {\n  const { pureXMLHttpRequest, observer, resolver } = options\n  let debug = createDebug('XHR')\n\n  return class XMLHttpRequestOverride implements XMLHttpRequest {\n    _requestHeaders: Headers\n    _responseHeaders: Headers\n\n    // Collection of events modified by `addEventListener`/`removeEventListener` calls.\n    _events: XMLHttpRequestEvent<InternalXMLHttpRequestEventTargetEventMap>[] =\n      []\n\n    /* Request state */\n    public static readonly UNSENT = 0\n    public static readonly OPENED = 1\n    public static readonly HEADERS_RECEIVED = 2\n    public static readonly LOADING = 3\n    public static readonly DONE = 4\n    public readonly UNSENT = 0\n    public readonly OPENED = 1\n    public readonly HEADERS_RECEIVED = 2\n    public readonly LOADING = 3\n    public readonly DONE = 4\n\n    /* Custom public properties */\n    public method: string\n    public url: string\n\n    /* XHR public properties */\n    public withCredentials: boolean\n    public status: number\n    public statusText: string\n    public user?: string\n    public password?: string\n    public data: string\n    public async?: boolean\n    public response: any\n    public responseText: string\n    public responseType: XMLHttpRequestResponseType\n    public responseXML: Document | null\n    public responseURL: string\n    public upload: XMLHttpRequestUpload\n    public readyState: number\n    public onreadystatechange: (this: XMLHttpRequest, ev: Event) => any =\n      null as any\n    public timeout: number\n\n    /* Events */\n    public onabort: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public onerror: (this: XMLHttpRequestEventTarget, event: Event) => any =\n      null as any\n    public onload: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public onloadend: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public onloadstart: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public onprogress: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public ontimeout: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n\n    constructor() {\n      this.url = ''\n      this.method = 'GET'\n      this.readyState = this.UNSENT\n      this.withCredentials = false\n      this.status = 200\n      this.statusText = 'OK'\n      this.data = ''\n      this.response = ''\n      this.responseType = 'text'\n      this.responseText = ''\n      this.responseXML = null\n      this.responseURL = ''\n      this.upload = {} as any\n      this.timeout = 0\n\n      this._requestHeaders = new Headers()\n      this._responseHeaders = new Headers()\n    }\n\n    setReadyState(nextState: number): void {\n      if (nextState === this.readyState) {\n        return\n      }\n\n      debug('readyState change %d -> %d', this.readyState, nextState)\n      this.readyState = nextState\n\n      if (nextState !== this.UNSENT) {\n        debug('triggerring readystate change...')\n        this.trigger('readystatechange')\n      }\n    }\n\n    /**\n     * Triggers both direct callback and attached event listeners\n     * for the given event.\n     */\n    trigger<\n      K extends keyof (XMLHttpRequestEventTargetEventMap & {\n        readystatechange: ProgressEvent<XMLHttpRequestEventTarget>\n      })\n    >(eventName: K, options?: ProgressEventInit) {\n      debug('trigger \"%s\" (%d)', eventName, this.readyState)\n      debug('resolve listener for event \"%s\"', eventName)\n\n      // @ts-expect-error XMLHttpRequest class has no index signature.\n      const callback = this[`on${eventName}`] as XMLHttpRequestEventHandler\n      callback?.call(this, createEvent(this, eventName, options))\n\n      for (const event of this._events) {\n        if (event.name === eventName) {\n          debug(\n            'calling mock event listener \"%s\" (%d)',\n            eventName,\n            this.readyState\n          )\n          event.listener.call(this, createEvent(this, eventName, options))\n        }\n      }\n\n      return this\n    }\n\n    reset() {\n      debug('reset')\n\n      this.setReadyState(this.UNSENT)\n      this.status = 200\n      this.statusText = 'OK'\n      this.data = ''\n      this.response = null as any\n      this.responseText = null as any\n      this.responseXML = null as any\n\n      this._requestHeaders = new Headers()\n      this._responseHeaders = new Headers()\n    }\n\n    public async open(\n      method: string,\n      url: string,\n      async: boolean = true,\n      user?: string,\n      password?: string\n    ) {\n      debug = createDebug(`XHR ${method} ${url}`)\n      debug('open', { method, url, async, user, password })\n\n      this.reset()\n      this.setReadyState(this.OPENED)\n\n      if (typeof url === 'undefined') {\n        this.url = method\n        this.method = 'GET'\n      } else {\n        this.url = url\n        this.method = method\n        this.async = async\n        this.user = user\n        this.password = password\n      }\n    }\n\n    public send(data?: string) {\n      debug('send %s %s', this.method, this.url)\n\n      this.data = data || ''\n\n      let url: URL\n\n      try {\n        url = new URL(this.url)\n      } catch (error) {\n        // Assume a relative URL, if construction of a new `URL` instance fails.\n        // Since `XMLHttpRequest` always executed in a DOM-like environment,\n        // resolve the relative request URL against the current window location.\n        url = new URL(this.url, window.location.href)\n      }\n\n      debug('request headers', this._requestHeaders)\n\n      // Create an intercepted request instance exposed to the request intercepting middleware.\n      const isoRequest: IsomorphicRequest = {\n        id: uuidv4(),\n        url,\n        method: this.method,\n        headers: this._requestHeaders,\n        credentials: this.withCredentials ? 'include' : 'omit',\n        body: this.data,\n      }\n\n      observer.emit('request', isoRequest)\n\n      debug('awaiting mocked response...')\n\n      Promise.resolve(until(async () => resolver(isoRequest, this))).then(\n        ([middlewareException, mockedResponse]) => {\n          // When the request middleware throws an exception, error the request.\n          // This cancels the request and is similar to a network error.\n          if (middlewareException) {\n            debug(\n              'middleware function threw an exception!',\n              middlewareException\n            )\n\n            // No way to propagate the actual error message.\n            this.trigger('error')\n            this.abort()\n\n            return\n          }\n\n          // Return a mocked response, if provided in the middleware.\n          if (mockedResponse) {\n            debug('received mocked response', mockedResponse)\n\n            // Trigger a loadstart event to indicate the initialization of the fetch.\n            this.trigger('loadstart')\n\n            this.status = mockedResponse.status || 200\n            this.statusText = mockedResponse.statusText || 'OK'\n            this._responseHeaders = mockedResponse.headers\n              ? objectToHeaders(mockedResponse.headers)\n              : new Headers()\n\n            debug('set response status', this.status, this.statusText)\n            debug('set response headers', this._responseHeaders)\n\n            // Mark that response headers has been received\n            // and trigger a ready state event to reflect received headers\n            // in a custom `onreadystatechange` callback.\n            this.setReadyState(this.HEADERS_RECEIVED)\n\n            debug('response type', this.responseType)\n            this.response = this.getResponseBody(mockedResponse.body)\n            this.responseText = mockedResponse.body || ''\n            this.responseXML = this.getResponseXML()\n\n            debug('set response body', this.response)\n\n            if (mockedResponse.body && this.response) {\n              this.setReadyState(this.LOADING)\n\n              // Presense of the mocked response implies a response body (not null).\n              // Presense of the coerced `this.response` implies the mocked body is valid.\n              const bodyBuffer = bufferFrom(mockedResponse.body)\n\n              // Trigger a progress event based on the mocked response body.\n              this.trigger('progress', {\n                loaded: bodyBuffer.length,\n                total: bodyBuffer.length,\n              })\n            }\n\n            /**\n             * Explicitly mark the request as done so its response never hangs.\n             * @see https://github.com/mswjs/interceptors/issues/13\n             */\n            this.setReadyState(this.DONE)\n\n            // Trigger a load event to indicate the fetch has succeeded.\n            this.trigger('load')\n            // Trigger a loadend event to indicate the fetch has completed.\n            this.trigger('loadend')\n\n            observer.emit('response', isoRequest, toIsoResponse(mockedResponse))\n          } else {\n            debug('no mocked response received!')\n\n            // Perform an original request, when the request middleware returned no mocked response.\n            const originalRequest = new pureXMLHttpRequest()\n\n            debug('opening an original request %s %s', this.method, this.url)\n            originalRequest.open(\n              this.method,\n              this.url,\n              this.async ?? true,\n              this.user,\n              this.password\n            )\n\n            // Reflect a successful state of the original request\n            // on the patched instance.\n            originalRequest.addEventListener('load', () => {\n              debug('original \"onload\"')\n\n              this.status = originalRequest.status\n              this.statusText = originalRequest.statusText\n              this.responseURL = originalRequest.responseURL\n              this.responseType = originalRequest.responseType\n              this.response = originalRequest.response\n              this.responseText = originalRequest.responseText\n              this.responseXML = originalRequest.responseXML\n\n              debug('set mock request readyState to DONE')\n\n              // Explicitly mark the mocked request instance as done\n              // so the response never hangs.\n              /**\n               * @note `readystatechange` listener is called TWICE\n               * in the case of unhandled request.\n               */\n              this.setReadyState(this.DONE)\n\n              debug('received original response', this.status, this.statusText)\n              debug('original response body:', this.response)\n\n              const responseHeaders = originalRequest.getAllResponseHeaders()\n              debug('original response headers:\\n', responseHeaders)\n\n              this._responseHeaders = stringToHeaders(responseHeaders)\n              debug(\n                'original response headers (normalized)',\n                this._responseHeaders\n              )\n\n              debug('original response finished')\n\n              observer.emit('response', isoRequest, {\n                status: originalRequest.status,\n                statusText: originalRequest.statusText,\n                headers: this._responseHeaders,\n                body: originalRequest.response,\n              })\n            })\n\n            // Assign callbacks and event listeners from the intercepted XHR instance\n            // to the original XHR instance.\n            this.propagateCallbacks(originalRequest)\n            this.propagateListeners(originalRequest)\n            this.propagateHeaders(originalRequest, this._requestHeaders)\n\n            if (this.async) {\n              originalRequest.timeout = this.timeout\n            }\n\n            debug('send', this.data)\n            originalRequest.send(this.data)\n          }\n        }\n      )\n    }\n\n    public abort() {\n      debug('abort')\n\n      if (this.readyState > this.UNSENT && this.readyState < this.DONE) {\n        this.setReadyState(this.UNSENT)\n        this.trigger('abort')\n      }\n    }\n\n    dispatchEvent() {\n      return false\n    }\n\n    public setRequestHeader(name: string, value: string) {\n      debug('set request header \"%s\" to \"%s\"', name, value)\n      this._requestHeaders.append(name, value)\n    }\n\n    public getResponseHeader(name: string): string | null {\n      debug('get response header \"%s\"', name)\n\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        debug(\n          'cannot return a header: headers not received (state: %s)',\n          this.readyState\n        )\n        return null\n      }\n\n      const headerValue = this._responseHeaders.get(name)\n\n      debug(\n        'resolved response header \"%s\" to \"%s\"',\n        name,\n        headerValue,\n        this._responseHeaders\n      )\n\n      return headerValue\n    }\n\n    public getAllResponseHeaders(): string {\n      debug('get all response headers')\n\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        debug(\n          'cannot return headers: headers not received (state: %s)',\n          this.readyState\n        )\n        return ''\n      }\n\n      return headersToString(this._responseHeaders)\n    }\n\n    public addEventListener<\n      K extends keyof InternalXMLHttpRequestEventTargetEventMap\n    >(name: K, listener: XMLHttpRequestEventHandler) {\n      debug('addEventListener', name, listener)\n      this._events.push({\n        name,\n        listener,\n      })\n    }\n\n    public removeEventListener<K extends keyof XMLHttpRequestEventMap>(\n      name: K,\n      listener: (event?: XMLHttpRequestEventMap[K]) => void\n    ): void {\n      debug('removeEventListener', name, listener)\n      this._events = this._events.filter((storedEvent) => {\n        return storedEvent.name !== name && storedEvent.listener !== listener\n      })\n    }\n\n    public overrideMimeType() {}\n\n    /**\n     * Resolves the response based on the `responseType` value.\n     */\n    getResponseBody(body: string | undefined) {\n      // Handle an improperly set \"null\" value of the mocked response body.\n      const textBody = body ?? ''\n      debug('coerced response body to', textBody)\n\n      switch (this.responseType) {\n        case 'json': {\n          debug('resolving response body as JSON')\n          return parseJson(textBody)\n        }\n\n        case 'blob': {\n          const blobType =\n            this.getResponseHeader('content-type') || 'text/plain'\n          debug('resolving response body as Blob', { type: blobType })\n\n          return new Blob([textBody], {\n            type: blobType,\n          })\n        }\n\n        case 'arraybuffer': {\n          debug('resolving response body as ArrayBuffer')\n          const arrayBuffer = bufferFrom(textBody)\n          return arrayBuffer\n        }\n\n        default:\n          return textBody\n      }\n    }\n\n    getResponseXML() {\n      const contentType = this.getResponseHeader('Content-Type')\n      if (contentType === 'application/xml' || contentType === 'text/xml') {\n        return new DOMParser().parseFromString(this.responseText, contentType)\n      }\n      return null\n    }\n\n    /**\n     * Propagates mock XMLHttpRequest instance callbacks\n     * to the given XMLHttpRequest instance.\n     */\n    propagateCallbacks(request: XMLHttpRequest) {\n      request.onabort = this.abort\n      request.onerror = this.onerror\n      request.ontimeout = this.ontimeout\n      request.onload = this.onload\n      request.onloadstart = this.onloadstart\n      request.onloadend = this.onloadend\n      request.onprogress = this.onprogress\n      request.onreadystatechange = this.onreadystatechange\n    }\n\n    /**\n     * Propagates the mock XMLHttpRequest instance listeners\n     * to the given XMLHttpRequest instance.\n     */\n    propagateListeners(request: XMLHttpRequest) {\n      debug(\n        'propagating request listeners (%d) to the original request',\n        this._events.length,\n        this._events\n      )\n\n      this._events.forEach(({ name, listener }) => {\n        request.addEventListener(name, listener)\n      })\n    }\n\n    propagateHeaders(request: XMLHttpRequest, headers: Headers) {\n      debug('propagating request headers to the original request', headers)\n\n      // Preserve the request headers casing.\n      Object.entries(headers.raw()).forEach(([name, value]) => {\n        debug('setting \"%s\" (%s) header on the original request', name, value)\n        request.setRequestHeader(name, value)\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}