{"ast":null,"code":"\"use strict\";\n\nvar defaultParseOptions = {\n  decodeValues: true,\n  map: false,\n  silent: false\n};\nfunction isNonEmptyString(str) {\n  return typeof str === \"string\" && !!str.trim();\n}\nfunction parseString(setCookieValue, options) {\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n  var nameValue = parts.shift().split(\"=\");\n  var name = nameValue.shift();\n  var value = nameValue.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n\n  options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n  try {\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n  } catch (e) {\n    console.error(\"set-cookie-parser encountered an error while decoding a cookie with value '\" + value + \"'. Set options.decodeValues to false to disable this feature.\", e);\n  }\n  var cookie = {\n    name: name,\n    // grab everything before the first =\n    value: value\n  };\n  parts.forEach(function (part) {\n    var sides = part.split(\"=\");\n    var key = sides.shift().trimLeft().toLowerCase();\n    var value = sides.join(\"=\");\n    if (key === \"expires\") {\n      cookie.expires = new Date(value);\n    } else if (key === \"max-age\") {\n      cookie.maxAge = parseInt(value, 10);\n    } else if (key === \"secure\") {\n      cookie.secure = true;\n    } else if (key === \"httponly\") {\n      cookie.httpOnly = true;\n    } else if (key === \"samesite\") {\n      cookie.sameSite = value;\n    } else {\n      cookie[key] = value;\n    }\n  });\n  return cookie;\n}\nfunction parse(input, options) {\n  options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n  if (!input) {\n    if (!options.map) {\n      return [];\n    } else {\n      return {};\n    }\n  }\n  if (input.headers && input.headers[\"set-cookie\"]) {\n    // fast-path for node.js (which automatically normalizes header names to lower-case\n    input = input.headers[\"set-cookie\"];\n  } else if (input.headers) {\n    // slow-path for other environments - see #25\n    var sch = input.headers[Object.keys(input.headers).find(function (key) {\n      return key.toLowerCase() === \"set-cookie\";\n    })];\n    // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n    if (!sch && input.headers.cookie && !options.silent) {\n      console.warn(\"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\");\n    }\n    input = sch;\n  }\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n  options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n  if (!options.map) {\n    return input.filter(isNonEmptyString).map(function (str) {\n      return parseString(str, options);\n    });\n  } else {\n    var cookies = {};\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\n      var cookie = parseString(str, options);\n      cookies[cookie.name] = cookie;\n      return cookies;\n    }, cookies);\n  }\n}\n\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/\nfunction splitCookiesString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString;\n  }\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n        skipWhitespace();\n        nextStart = pos;\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n\n        // currently special character\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true;\n          // pos is inside the next cookie, so back up and return it.\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n  return cookiesStrings;\n}\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;","map":{"version":3,"names":["defaultParseOptions","decodeValues","map","silent","isNonEmptyString","str","trim","parseString","setCookieValue","options","parts","split","filter","nameValue","shift","name","value","join","Object","assign","decodeURIComponent","e","console","error","cookie","forEach","part","sides","key","trimLeft","toLowerCase","expires","Date","maxAge","parseInt","secure","httpOnly","sameSite","parse","input","headers","sch","keys","find","warn","Array","isArray","cookies","reduce","splitCookiesString","cookiesString","cookiesStrings","pos","start","ch","lastComma","nextStart","cookiesSeparatorFound","skipWhitespace","length","test","charAt","notSpecialChar","push","substring","module","exports"],"sources":["C:/Users/elif/Documents/React/FSWeb-S6-Challenge/node_modules/set-cookie-parser/lib/set-cookie.js"],"sourcesContent":["\"use strict\";\n\nvar defaultParseOptions = {\n  decodeValues: true,\n  map: false,\n  silent: false,\n};\n\nfunction isNonEmptyString(str) {\n  return typeof str === \"string\" && !!str.trim();\n}\n\nfunction parseString(setCookieValue, options) {\n  var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n  var nameValue = parts.shift().split(\"=\");\n  var name = nameValue.shift();\n  var value = nameValue.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  try {\n    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n  } catch (e) {\n    console.error(\n      \"set-cookie-parser encountered an error while decoding a cookie with value '\" +\n        value +\n        \"'. Set options.decodeValues to false to disable this feature.\",\n      e\n    );\n  }\n\n  var cookie = {\n    name: name, // grab everything before the first =\n    value: value,\n  };\n\n  parts.forEach(function (part) {\n    var sides = part.split(\"=\");\n    var key = sides.shift().trimLeft().toLowerCase();\n    var value = sides.join(\"=\");\n    if (key === \"expires\") {\n      cookie.expires = new Date(value);\n    } else if (key === \"max-age\") {\n      cookie.maxAge = parseInt(value, 10);\n    } else if (key === \"secure\") {\n      cookie.secure = true;\n    } else if (key === \"httponly\") {\n      cookie.httpOnly = true;\n    } else if (key === \"samesite\") {\n      cookie.sameSite = value;\n    } else {\n      cookie[key] = value;\n    }\n  });\n\n  return cookie;\n}\n\nfunction parse(input, options) {\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!input) {\n    if (!options.map) {\n      return [];\n    } else {\n      return {};\n    }\n  }\n\n  if (input.headers && input.headers[\"set-cookie\"]) {\n    // fast-path for node.js (which automatically normalizes header names to lower-case\n    input = input.headers[\"set-cookie\"];\n  } else if (input.headers) {\n    // slow-path for other environments - see #25\n    var sch =\n      input.headers[\n        Object.keys(input.headers).find(function (key) {\n          return key.toLowerCase() === \"set-cookie\";\n        })\n      ];\n    // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n    if (!sch && input.headers.cookie && !options.silent) {\n      console.warn(\n        \"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\"\n      );\n    }\n    input = sch;\n  }\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  options = options\n    ? Object.assign({}, defaultParseOptions, options)\n    : defaultParseOptions;\n\n  if (!options.map) {\n    return input.filter(isNonEmptyString).map(function (str) {\n      return parseString(str, options);\n    });\n  } else {\n    var cookies = {};\n    return input.filter(isNonEmptyString).reduce(function (cookies, str) {\n      var cookie = parseString(str, options);\n      cookies[cookie.name] = cookie;\n      return cookies;\n    }, cookies);\n  }\n}\n\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/\nfunction splitCookiesString(cookiesString) {\n  if (Array.isArray(cookiesString)) {\n    return cookiesString;\n  }\n  if (typeof cookiesString !== \"string\") {\n    return [];\n  }\n\n  var cookiesStrings = [];\n  var pos = 0;\n  var start;\n  var ch;\n  var lastComma;\n  var nextStart;\n  var cookiesSeparatorFound;\n\n  function skipWhitespace() {\n    while (pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))) {\n      pos += 1;\n    }\n    return pos < cookiesString.length;\n  }\n\n  function notSpecialChar() {\n    ch = cookiesString.charAt(pos);\n\n    return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n  }\n\n  while (pos < cookiesString.length) {\n    start = pos;\n    cookiesSeparatorFound = false;\n\n    while (skipWhitespace()) {\n      ch = cookiesString.charAt(pos);\n      if (ch === \",\") {\n        // ',' is a cookie separator if we have later first '=', not ';' or ','\n        lastComma = pos;\n        pos += 1;\n\n        skipWhitespace();\n        nextStart = pos;\n\n        while (pos < cookiesString.length && notSpecialChar()) {\n          pos += 1;\n        }\n\n        // currently special character\n        if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n          // we found cookies separator\n          cookiesSeparatorFound = true;\n          // pos is inside the next cookie, so back up and return it.\n          pos = nextStart;\n          cookiesStrings.push(cookiesString.substring(start, lastComma));\n          start = pos;\n        } else {\n          // in param ',' or param separator ';',\n          // we continue from that comma\n          pos = lastComma + 1;\n        }\n      } else {\n        pos += 1;\n      }\n    }\n\n    if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n    }\n  }\n\n  return cookiesStrings;\n}\n\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}